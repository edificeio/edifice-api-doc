openapi: '3.0.0'
info:
  title: Edifice - Conversation - API 2024 ðŸš§ðŸš§
  description: Conversation is the internal messaging application in Edifice's platform.
  version: 5.0.0

servers:
  - url: /conversation/api

security: 
  - xsrfTokenCookie: []
    oneSessionId: []
  - xsrfTokenHeader: []
    oneSessionId: []

paths:
  # ApiController
  #-------------------------------------------------------------------------------
  /folders/{folderId}/messages:
    get:
      operationId: ListFolderMessages
      summary: List messages from a folder.
      parameters: 
        - name: folderId
          in: path
          required: true
          schema:
            oneOf:
            - $ref: '#/components/schemas/DraftFolderId'
            - $ref: '#/components/schemas/TrashFolderId'
            - $ref: '#/components/schemas/InboxFolderId'
            - $ref: '#/components/schemas/OutboxFolderId'
            - type: string
        - name: page
          in: query
          description: Requested page number, starting at 0.
          schema:
            type: integer
        - name: page_size
          in: query
          description: 'Maximum number of messages to return (in other words: size of a page of results).'
          schema:
            type: integer
        - name: unread
          in: query
          description: Only return unread messages ?
          schema:
            type: boolean
        - name: search
          in: query
          description: Term to search for in messages body, recipients...
          schema: 
            type: string
            example: "Hello!"
      responses:
        '200':
          description: A list of messages without their body.
          content:
            application/json:
              schema:
                $ref: 'jsonschema/ListFolderMessagesResponse.json'
              example: |[
                |{
                | "id":"abcdef-0123", "subject":"Preum's", "date":1732090599965, "from":
                |   {"id":"1234-567890", "displayName":"Mr T", "profile":"Teacher"}, 
                | "to":[{"id":"0987-654321", "displayName":"Alex", "profile":"Student"}], "cc":[], "cci":[], 
                | "state":"SEND", "hasAttachment": true, "unread": false, "trashed": true, "responded": true, "forwarded": true
                |},{
                | "id":"ghijkl-4456", "subject":"Welcome !", "date":1732090625455, "from":
                |   {"id":"0987-654321", "displayName":"Alex", "profile":"Student"}, 
                | "to":[], "cc":[{"id":"1234-567890", "displayName":"Mr T", "profile":"Teacher"}], "cci":[], 
                | "state":"SEND", "hasAttachment": false, "unread": true, "trashed": false, "responded": true, "forwarded": true
                |},{
                | "id":"mnopqr-7890", "subject":"Never ending story", "date":1732090636455, "from":
                |   {"id":"0071-654321", "displayName":"This is me", "profile":"Teacher"}, 
                | "to":[], "cc":[], "cci":[{"id":"1234-567890", "displayName":"Mr T", "profile":"Teacher"}], 
                | "state":"DRAFT", "hasAttachment": false, "unread": false, "trashed": false, "responded": false, "forwarded": false
                |}]
        '302':
          description: User session is closed, the HTTP client is redirected to a Location (login page).
          headers: 
            Location:
              schema: 
                type: string
                example: "/auth/login?callback=$SERVER_DOMAIN/conversation/conversation"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../_components/schemas/Errors.yaml#/ErrorModel'
  /messages/{messageId}:
    get:
      operationId: GetFullMessage
      summary: Get the full content of a message.
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return the queried message with its details.
          content:
            application/json:
              schema:
                $ref: 'jsonschema/GetFullMessageResponse.json'
        '302':
          description: User session is closed, the HTTP client is redirected to a Location (login page).
          headers: 
            Location:
              schema: 
                type: string
                example: "/auth/login?callback=$SERVER_DOMAIN/conversation/conversation"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../_components/schemas/Errors.yaml#/ErrorModel'
  /folders
    get:
      operationId: ListFoldersAndSubfolders
      summary: List the user's folders, and with subfolders if  the Ì€`depth` query parameter is set and greater than 1.
      parameters:
        - name: depth
          in: query
          description: 'Maximum requested depth of folders to return. The backend may restrict this value. Defaults to 1 when not specified.'
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Return the queried folders/subfolders.
          content:
            application/json:
              schema:
                $ref: 'jsonschema/ListFoldersAndSubfoldersResponse.json'
        '302':
          description: User session is closed, the HTTP client is redirected to a Location (login page).
          headers: 
            Location:
              schema: 
                type: string
                example: "/auth/login?callback=$SERVER_DOMAIN/conversation/conversation"
        '400':
          description: Requested folders depth is incorrect.
          headers: 
            Location:
              schema: 
                type: string
                example: "/auth/login?callback=$SERVER_DOMAIN/conversation/conversation"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../_components/schemas/Errors.yaml#/ErrorModel'
      
components:
  schemas:
    DraftFolderId:
      type: string
      pattern: "^draft$"
    TrashFolderId:
      type: string
      pattern: "^trash$"
    InboxFolderId:
      type: string
      pattern: "^inbox$"
    OutboxFolderId:
      type: string
      pattern: "^outbox$"
  securitySchemes:
    $ref: '../_components/schemas/SecuritySchemes.yaml'
